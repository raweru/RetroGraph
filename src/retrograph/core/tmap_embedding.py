"""
This module provides the TMAPEmbedding class for storing and accessing tmap layout data.

The TMAPEmbedding class encapsulates the coordinates and connectivity information
generated by the tmap layout algorithm, providing a clean interface for accessing
the layout data and generating line segments for visualization.
"""

from typing import Generator
from .line import Line


class TMAPEmbedding:
    """Stores and provides access to tmap layout data.

    This class encapsulates the coordinates (x, y) and connectivity information (s, t)
    generated by the tmap layout algorithm. It provides properties to access the
    layout data and a method to generate line segments for visualization.

    Attributes:
        _x (numpy.ndarray): X-coordinates of nodes in the layout
        _y (numpy.ndarray): Y-coordinates of nodes in the layout
        _s (numpy.ndarray): Source node indices for edges
        _t (numpy.ndarray): Target node indices for edges
        _gp (dict): Additional graph properties/metadata
    """

    def __init__(self, x, y, s, t, gp):
        """Initialize a new TMAPEmbedding instance.

        Args:
            x: Array of x-coordinates for each node
            y: Array of y-coordinates for each node
            s: Array of source node indices for edges
            t: Array of target node indices for edges
            gp: Dictionary of additional graph properties
        """
        self._x = x
        self._y = y
        self._s = s
        self._t = t
        self._gp = gp

    @property
    def x(self):
        """Get the x-coordinates of all nodes in the layout."""
        return self._x

    @property
    def y(self):
        """Get the y-coordinates of all nodes in the layout."""
        return self._y

    @property
    def s(self):
        """Get the source node indices for all edges."""
        return self._s

    @property
    def t(self):
        """Get the target node indices for all edges."""
        return self._t

    @property
    def graph_properties(self):
        """Get additional graph properties/metadata."""
        return self._gp

    def get_lines(self) -> Generator[Line, None, None]:
        """Generate Line objects representing edges in the layout.

        Yields:
            Line: A Line object for each edge, containing the coordinates
                 of its source and target nodes.
        """
        for s, t in zip(self.s, self.t):
            yield Line(self.x[s], self.x[t], self.y[s], self.y[t])
